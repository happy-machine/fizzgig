{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Serverless VPC Example",
  "Resources": {
    "elasticacheInstance": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "AutoMinorVersionUpgrade": "true",
        "ClusterName": "serveless-sample",
        "Engine": "redis",
        "NumCacheNodes": "1",
        "CacheSubnetGroupName": {
          "Ref": "CacheSubnetGroup"
        },
        "CacheNodeType": "cache.t2.micro",
        "Tags": [
          {
            "Key": "serviceName",
            "Value": "serveless-sample"
          }
        ],
        "VpcSecurityGroupIds": [
          {
            "Ref": "RedisSecurityGroup"
          }
        ]
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true"
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.0.0/23",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.16.0/23",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.32.0/23",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnetC": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.48.0/23",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicSubnetD": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": "10.0.64.0/23",
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "DependsOn": ["VPC", "AttachGateway"],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PrivateRouteTableAssociationA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["PrivateRouteTable", "PrivateSubnetA"],
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PublicRouteTableAssociationB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["PublicRouteTable", "PublicSubnetB"],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetB"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicRouteTableAssociationC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["PublicRouteTable", "PublicSubnetC"],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetC"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicRouteTableAssociationD": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": ["PublicRouteTable", "PublicSubnetD"],
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetD"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "VPCSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow https",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "EIP": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "NAT": {
      "DependsOn": "VPC",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["EIP", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnetA"
        },
        "Tags": [
          {
            "Key": "env",
            "Value": "dev"
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NAT"
        }
      }
    },
    "RedisSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": "CacheSubnetGroup",
      "Properties": {
        "GroupDescription": "Security Group for Redis",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "6379",
            "ToPort": "6379",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "CacheSubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "DependsOn": ["PrivateSubnetA"],
      "Properties": {
        "Description": "Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnetA"
          }
        ]
      }
    },
    "NetworkAclPublic": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "NetworkAclPrivate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        }
      }
    },
    "PublicSubnetNetworkAclAssociationA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetA"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "PublicSubnetNetworkAclAssociationB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetB"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "PublicSubnetNetworkAclAssociationC": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetC"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "PublicSubnetNetworkAclAssociationD": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnetD"
        },
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        }
      }
    },
    "NetworkAclEntryInPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicAllowAll": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPublic"
        },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryInPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": false,
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAllowVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "NetworkAclPrivate"
        },
        "RuleNumber": 100,
        "Protocol": -1,
        "RuleAction": "allow",
        "Egress": true,
        "CidrBlock": "0.0.0.0/0"
      }
    }
  },
  "Outputs": {
    "VPCID": {
      "Value": {
        "Ref": "VPC"
      },
      "Export": {
        "Name": "VPCID"
      }
    },
    "RedisSecurityGroup": {
      "Value": {
        "Ref": "RedisSecurityGroup"
      },
      "Export": {
        "Name": "RedisSecurityGroup"
      }
    },
    "CacheSubnetGroup": {
      "Value": {
        "Ref": "CacheSubnetGroup"
      },
      "Export": {
        "Name": "CacheSubnetGroup"
      }
    },
    "VPCSecurityGroup": {
      "Value": {
        "Ref": "VPCSecurityGroup"
      },
      "Export": {
        "Name": "VPCSecurityGroup"
      }
    },
    "PrivateSubnetA": {
      "Value": {
        "Ref": "PrivateSubnetA"
      },
      "Export": {
        "Name": "PrivateSubnetA"
      }
    },
    "PublicSubnetA": {
      "Value": {
        "Ref": "PublicSubnetA"
      },
      "Export": {
        "Name": "PublicSubnetA"
      }
    },
    "PublicSubnetB": {
      "Value": {
        "Ref": "PublicSubnetB"
      },
      "Export": {
        "Name": "PublicSubnetB"
      }
    },
    "PublicSubnetC": {
      "Value": {
        "Ref": "PublicSubnetC"
      },
      "Export": {
        "Name": "PublicSubnetC"
      }
    },
    "PublicSubnetD": {
      "Value": {
        "Ref": "PublicSubnetD"
      },
      "Export": {
        "Name": "PublicSubnetD"
      }
    },
    "cacheUrl": {
      "Description": "URL of newly created ElastiCache",
      "Value": {
        "Fn::GetAtt": ["elasticacheInstance", "RedisEndpoint.Address"]
      },
      "Export": {
        "Name": "cacheUrl"
      }
    }
  }
}
